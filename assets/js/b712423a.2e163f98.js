"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[981],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},s=Object.keys(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=o.createContext({}),l=function(e){var t=o.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=l(e.components);return o.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},c=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,u=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=l(n),m=a,k=c["".concat(u,".").concat(m)]||c[m]||d[m]||s;return n?o.createElement(k,r(r({ref:t},p),{},{components:n})):o.createElement(k,r({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,r=new Array(s);r[0]=c;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:a,r[1]=i;for(var l=2;l<s;l++)r[l]=n[l];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},1689:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var o=n(7462),a=(n(7294),n(3905));const s={sidebar_position:3},r="React hooks",i={unversionedId:"client/react",id:"client/react",title:"React hooks",description:"Zodios comes with a Query and Mutation hook helper.",source:"@site/docs/client/react.md",sourceDirName:"client",slug:"/client/react",permalink:"/docs/client/react",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Client API plugins",permalink:"/docs/client/plugins"},next:{title:"Zodios server",permalink:"/docs/category/zodios-server"}},u={},l=[{value:"Zodios Hooks instance",id:"zodios-hooks-instance",level:2},{value:"Zodios methods",id:"zodios-methods",level:2},{value:"<code>hooks.use[Alias]</code>",id:"hooksusealias",level:3},{value:"query alias:",id:"query-alias",level:4},{value:"mutation alias",id:"mutation-alias",level:4},{value:"<code>zodios.useQuery</code>",id:"zodiosusequery",level:3},{value:"<code>zodios.useInfiniteQuery</code>",id:"zodiosuseinfinitequery",level:3},{value:"<code>zodios.useMutation</code>",id:"zodiosusemutation",level:3},{value:"<code>zodios.useGet</code>",id:"zodiosuseget",level:3},{value:"<code>zodios.usePost</code>",id:"zodiosusepost",level:3},{value:"<code>zodios.usePut</code>",id:"zodiosuseput",level:3},{value:"<code>zodios.usePatch</code>",id:"zodiosusepatch",level:3},{value:"<code>zodios.useDelete</code>",id:"zodiosusedelete",level:3},{value:"Example",id:"example",level:2}],p={toc:l};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"react-hooks"},"React hooks"),(0,a.kt)("p",null,"Zodios comes with a Query and Mutation hook helper.",(0,a.kt)("br",{parentName:"p"}),"\n","It's a thin wrapper around React-Query but with zodios auto completion and automatic key management.\nNo need to remember your keys anymore."),(0,a.kt)("p",null,"Zodios query hook also returns an invalidation helper to allow you to reset react query cache easily."),(0,a.kt)("h2",{id:"zodios-hooks-instance"},"Zodios Hooks instance"),(0,a.kt)("p",null,"When creating an instance or zodios hooks, you need to provide a name that will be used as ",(0,a.kt)("inlineCode",{parentName:"p"},"react-query")," key prefix and your instance of Zodios Api Client.  "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"new ZodiosHook(name: string, client: Zodios)\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const apiClient = new Zodios(baseUrl, [...]);\nconst apiHooks = new ZodiosHooks("myAPI", apiClient);\n')),(0,a.kt)("h2",{id:"zodios-methods"},"Zodios methods"),(0,a.kt)("h3",{id:"hooksusealias"},(0,a.kt)("inlineCode",{parentName:"h3"},"hooks.use[Alias]")),(0,a.kt)("p",null,"You will usually want to use aliases to call your endpoints. You can define them in the ",(0,a.kt)("inlineCode",{parentName:"p"},"alias")," option in your API definition endpoint."),(0,a.kt)("h4",{id:"query-alias"},"query alias:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"function use[Alias](config?: ZodiosRequestOptions, queryOptions: QueryOptions): QueryResult<Response>;\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"example"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'// identical to hooks.useGet("/users")\nconst { data: users, isLoading, isError } =  hooks.useGetUsers();\n')),(0,a.kt)("h4",{id:"mutation-alias"},"mutation alias"),(0,a.kt)("p",null,"Alias for ",(0,a.kt)("inlineCode",{parentName:"p"},"post"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"put"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"patch"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"delete")," endpoints:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"function use[Alias](config?: ZodiosRequestOptions, queryOptions?: QueryOptions): MutationResult<Response>;\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"example"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'// identical to usePost("/users") or useMutation("post","/users")\nconst { mutate } = hooks.useCreateUser();\n\n')),(0,a.kt)("h3",{id:"zodiosusequery"},(0,a.kt)("inlineCode",{parentName:"h3"},"zodios.useQuery")),(0,a.kt)("p",null,"Generic request method that allows to do queries (same as useGet)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"useQuery(path: string, config?: ZodiosRequestOptions, queryOptions?: QueryOptions): QueryResult<Response>;\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const { data: users, isLoading, isError } = hooks.useQuery('/users');\n")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"check ",(0,a.kt)("a",{parentName:"p",href:"https://react-query.tanstack.com/reference/useQuery"},"react-query documentation")," for more informations on ",(0,a.kt)("inlineCode",{parentName:"p"},"QueryResult")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"QueryOptions"),".")),(0,a.kt)("h3",{id:"zodiosuseinfinitequery"},(0,a.kt)("inlineCode",{parentName:"h3"},"zodios.useInfiniteQuery")),(0,a.kt)("p",null,"Generic request method that allows to load pages indefinitly."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"useInfiniteQuery(path: string, config?: ZodiosRequestOptions, infiniteQueryOptions?: InfiniteQueryOptions): InfiniteQueryResult<Response>;\n")),(0,a.kt)("p",null,"Compared to native react-query infinite query, you also need to provide a function named ",(0,a.kt)("inlineCode",{parentName:"p"},"getPageParamList")," to tell zodios which parameters will be used to paginate. Indeed, zodios needs to know it to be able to generate the correct query key automatically for you."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'  const { data: userPages, isFectching, fetchNextPage } = apiHooks.useInfiniteQuery(\n    "/users",\n    {\n      // request 10 users per page\n      queries: { limit: 10 },\n    },\n    {\n      // tell zodios to not use page as query key to allow infinite loading\n      getPageParamList: () => ["page"],\n      // get next page param has to return the next page as a query or path param\n      getNextPageParam: (lastPage, pages) => lastPage.nextPage ? {\n          queries: {\n            page: lastPage.nextPage,\n          },\n        }: undefined;\n    }\n  );\n')),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"check ",(0,a.kt)("a",{parentName:"p",href:"https://react-query.tanstack.com/reference/useInfiniteQuery"},"react-query infinite query documentation")," for more informations on ",(0,a.kt)("inlineCode",{parentName:"p"},"InfiniteQueryResult")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"InfiniteQueryOptions"),".")),(0,a.kt)("h3",{id:"zodiosusemutation"},(0,a.kt)("inlineCode",{parentName:"h3"},"zodios.useMutation")),(0,a.kt)("p",null,"Generic request method that allows to do mutations."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"useMutation(method: string, path: string, config: ZodiosRequestOptions, reactQueryOptions?: ReactQueryOptions): ReactMutationResult<Response>;\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const { mutate } = hooks.useMutation('post','/users');\n")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"check ",(0,a.kt)("a",{parentName:"p",href:"https://react-query.tanstack.com/reference/useMutation"},"react-query documentation")," for more informations on ",(0,a.kt)("inlineCode",{parentName:"p"},"MutationResult")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"MutationOptions"),".")),(0,a.kt)("h3",{id:"zodiosuseget"},(0,a.kt)("inlineCode",{parentName:"h3"},"zodios.useGet")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"useGet(path: string, config?: ZodiosRequestOptions, reactQueryOptions?: ReactQueryOptions): ReactQueryResult<Response>;\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const { data: user, isLoading, isError } = hooks.useGet("/users/:id", { params: { id: 1 } });\n')),(0,a.kt)("h3",{id:"zodiosusepost"},(0,a.kt)("inlineCode",{parentName:"h3"},"zodios.usePost")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"usePost(path: string, config?: ZodiosRequestOptions, reactQueryOptions?: ReactQueryOptions): ReactMutationResult<Response>;\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const { mutate } = hooks.usePost("/users");\n')),(0,a.kt)("h3",{id:"zodiosuseput"},(0,a.kt)("inlineCode",{parentName:"h3"},"zodios.usePut")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"usePut(path: string, config?: ZodiosRequestOptions, reactQueryOptions?: ReactQueryOptions): ReactMutationResult<Response>;\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const { mutate } = hooks.usePut("/users/:id", { params: { id: 1 } });\n')),(0,a.kt)("h3",{id:"zodiosusepatch"},(0,a.kt)("inlineCode",{parentName:"h3"},"zodios.usePatch")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"usePatch(path: string, config?: ZodiosRequestOptions, reactQueryOptions?: ReactQueryOptions): ReactMutationResult<Response>;\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const { mutate } = hooks.usePatch("/users/:id", {params: {id: 1}});\n')),(0,a.kt)("h3",{id:"zodiosusedelete"},(0,a.kt)("inlineCode",{parentName:"h3"},"zodios.useDelete")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"useDelete(path: string, config?: ZodiosRequestOptions, reactQueryOptions?: ReactQueryOptions): ReactMutationResult<Response>;\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const { mutate } = hooks.useDelete("/users/:id", { params: {id: 1 }});\n')),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="users.tsx"',title:'"users.tsx"'},'import React from "react";\nimport { Zodios } from "@zodios/core";\nimport { ZodiosHooks } from "@zodios/react";\nimport { z } from "zod";\n\nconst baseUrl = "https://jsonplaceholder.typicode.com";\nconst zodios = new Zodios(baseUrl, [...]);\nconst zodiosHooks = new ZodiosHooks("jsonplaceholder", zodios);\n\nconst Users = () => {\n  const {\n    data: users,\n    isLoading,\n    error,\n    invalidate: invalidateUsers, // zodios also provides invalidation helpers\n  } = zodiosHooks.useQuery("/users"); // or useGetUsers();\n  const { mutate } = zodiosHooks.useMutation("post", "/users", undefined, {\n    onSuccess: () => invalidateUsers(),\n  }); // or .useCreateUser(...);\n\n  return (\n    <>\n      <h1>Users</h1>\n      <button onClick={() => mutate({ name: "john doe" })}>add user</button>\n      {isLoading && <div>Loading...</div>}\n      {error && <div>Error: {(error as Error).message}</div>}\n      {users && (\n        <ul>\n          {users.map((user) => (\n            <li key={user.id}>{user.name}</li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="root.tsx"',title:'"root.tsx"'},'import { QueryClient, QueryClientProvider } from "react-query";\nimport { Users } from "./users";\n\nconst queryClient = new QueryClient();\n\nexport const App = () => {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <Users />\n    </QueryClientProvider>\n  );\n};\n')))}d.isMDXComponent=!0}}]);