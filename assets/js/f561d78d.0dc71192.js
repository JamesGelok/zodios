"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[742],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(n),m=o,k=c["".concat(l,".").concat(m)]||c[m]||d[m]||r;return n?a.createElement(k,s(s({ref:t},u),{},{components:n})):a.createElement(k,s({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,s=new Array(r);s[0]=c;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var p=2;p<r;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},8912:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var a=n(7462),o=(n(7294),n(3905));const r={sidebar_position:4},s="Solid hooks",i={unversionedId:"client/solid",id:"client/solid",title:"Solid hooks",description:"Zodios comes with a Query and Mutation hook helper.",source:"@site/docs/client/solid.md",sourceDirName:"client",slug:"/client/solid",permalink:"/docs/client/solid",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"React hooks",permalink:"/docs/client/react"},next:{title:"Zodios server",permalink:"/docs/category/zodios-server"}},l={},p=[{value:"Zodios Hooks instance",id:"zodios-hooks-instance",level:2},{value:"Zodios hooks methods",id:"zodios-hooks-methods",level:2},{value:"<code>hooks.create[Alias]</code>",id:"hookscreatealias",level:3},{value:"query alias:",id:"query-alias",level:4},{value:"immutable query alias:",id:"immutable-query-alias",level:4},{value:"mutation alias",id:"mutation-alias",level:4},{value:"<code>zodios.createQuery</code>",id:"zodioscreatequery",level:3},{value:"<code>zodios.createImmutableQuery</code>",id:"zodioscreateimmutablequery",level:3},{value:"<code>zodios.createInfiniteQuery</code>",id:"zodioscreateinfinitequery",level:3},{value:"<code>zodios.createImmutableInfiniteQuery</code>",id:"zodioscreateimmutableinfinitequery",level:3},{value:"<code>zodios.createMutation</code>",id:"zodioscreatemutation",level:3},{value:"<code>zodios.createGet</code>",id:"zodioscreateget",level:3},{value:"<code>zodios.createPost</code>",id:"zodioscreatepost",level:3},{value:"<code>zodios.createPut</code>",id:"zodioscreateput",level:3},{value:"<code>zodios.createPatch</code>",id:"zodioscreatepatch",level:3},{value:"<code>zodios.createDelete</code>",id:"zodioscreatedelete",level:3},{value:"Zodios key helpers",id:"zodios-key-helpers",level:2},{value:"<code>zodios.getKeyByPath</code>",id:"zodiosgetkeybypath",level:3},{value:"<code>zodios.getKeyByAlias</code>",id:"zodiosgetkeybyalias",level:3},{value:"Example",id:"example",level:2}],u={toc:p};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"solid-hooks"},"Solid hooks"),(0,o.kt)("p",null,"Zodios comes with a Query and Mutation hook helper.",(0,o.kt)("br",{parentName:"p"}),"\n","It's a thin wrapper around Solid-Query but with zodios auto completion and automatic key management.\nNo need to remember your keys anymore."),(0,o.kt)("p",null,"Zodios query hook also returns an invalidation helper to allow you to reset Solid query cache easily."),(0,o.kt)("h2",{id:"zodios-hooks-instance"},"Zodios Hooks instance"),(0,o.kt)("p",null,"When creating an instance or zodios hooks, you need to provide a name that will be used as ",(0,o.kt)("inlineCode",{parentName:"p"},"Solid-query")," key prefix and your instance of Zodios Api Client.  "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"new ZodiosHook(name: string, client: Zodios)\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const apiClient = new Zodios(baseUrl, [...]);\nconst apiHooks = new ZodiosHooks("myAPI", apiClient);\n')),(0,o.kt)("admonition",{title:"Never destructure the hook result in Solid-JS",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"if you want to keep reactivity, you should never destructure the hook results.\nand when passing reactives states to the hook, you should always use a ",(0,o.kt)("inlineCode",{parentName:"p"},"get mydParam()")," access to make parameters reactive.")),(0,o.kt)("h2",{id:"zodios-hooks-methods"},"Zodios hooks methods"),(0,o.kt)("h3",{id:"hookscreatealias"},(0,o.kt)("inlineCode",{parentName:"h3"},"hooks.create[Alias]")),(0,o.kt)("p",null,"You will usually want to use aliases to call your endpoints. You can define them in the ",(0,o.kt)("inlineCode",{parentName:"p"},"alias")," option in your API definition endpoint."),(0,o.kt)("h4",{id:"query-alias"},"query alias:"),(0,o.kt)("p",null,"Query alias hooks will return a ",(0,o.kt)("inlineCode",{parentName:"p"},"QueryResult")," object from ",(0,o.kt)("inlineCode",{parentName:"p"},"solid-query")," with:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"the response data and all solid-query result properties"),(0,o.kt)("li",{parentName:"ul"},"the generated ",(0,o.kt)("inlineCode",{parentName:"li"},"key")),(0,o.kt)("li",{parentName:"ul"},"the ",(0,o.kt)("inlineCode",{parentName:"li"},"invalidate")," helper.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"function create[Alias](config?: ZodiosRequestOptions, queryOptions: CreateQueryOptions): CreateQueryResult<Response>;\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"example"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'// identical to hooks.createQuery("/users")\nconst state =  hooks.createGetUsers();\n')),(0,o.kt)("h4",{id:"immutable-query-alias"},"immutable query alias:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"function create[Alias](body: Body, config?: ZodiosRequestOptions, queryOptions: CreateQueryOptions): CreateQueryResult<Response>;\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"example"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'// identical to hooks.createImmutableQuery("/users/search")\nconst state =  hooks.createSearchUsers({ name: "John" });\n')),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Immutable query aliases are only available for ",(0,o.kt)("inlineCode",{parentName:"p"},"post")," endpoints.\nyou also need to set the ",(0,o.kt)("inlineCode",{parentName:"p"},"immutable")," option to ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," in your API definition endpoint if you want alias to use ",(0,o.kt)("inlineCode",{parentName:"p"},"createImmutableQuery")," hook.")),(0,o.kt)("h4",{id:"mutation-alias"},"mutation alias"),(0,o.kt)("p",null,"Alias for ",(0,o.kt)("inlineCode",{parentName:"p"},"post"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"put"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"patch"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"delete")," endpoints:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"function create[Alias](config?: ZodiosRequestOptions, mutationOptions?: CreateMutationOptions): MutationResult<Response>;\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"example"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'// identical to createPost("/users") or createMutation("post","/users")\nconst state = hooks.useCreateUser();\n\n')),(0,o.kt)("h3",{id:"zodioscreatequery"},(0,o.kt)("inlineCode",{parentName:"h3"},"zodios.createQuery")),(0,o.kt)("p",null,"Generic request method that allows to do queries (same as useGet).\nQuery hooks will return a ",(0,o.kt)("inlineCode",{parentName:"p"},"QueryResult")," object from ",(0,o.kt)("inlineCode",{parentName:"p"},"solid-query")," with:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"the response data and all solid-query result properties"),(0,o.kt)("li",{parentName:"ul"},"the generated ",(0,o.kt)("inlineCode",{parentName:"li"},"key")),(0,o.kt)("li",{parentName:"ul"},"the ",(0,o.kt)("inlineCode",{parentName:"li"},"invalidate")," helper.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"createQuery(path: string, config?: ZodiosRequestOptions, queryOptions?: CreateQueryOptions): CreateQueryResult<Response>;\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const state = hooks.createQuery('/users');\n")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"check ",(0,o.kt)("a",{parentName:"p",href:"https://tanstack.com/query/v4/docs/adapters/solid-query"},"solid-query documentation")," for more informations on ",(0,o.kt)("inlineCode",{parentName:"p"},"QueryResult")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"QueryOptions"),".")),(0,o.kt)("h3",{id:"zodioscreateimmutablequery"},(0,o.kt)("inlineCode",{parentName:"h3"},"zodios.createImmutableQuery")),(0,o.kt)("p",null,"Generic request method that allows to do queries on post requests."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"createImmutableQuery(path: string, body: Body ,config?: ZodiosRequestOptions, queryOptions?: CreateQueryOptions): CreateQueryResult<Response>;\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const state = hooks.createImmutableQuery('/users/search', { name: \"John\" });\n")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"check ",(0,o.kt)("a",{parentName:"p",href:"https://tanstack.com/query/v4/docs/adapters/solid-query"},"solid-query documentation")," for more informations on ",(0,o.kt)("inlineCode",{parentName:"p"},"QueryResult")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"QueryOptions"),".")),(0,o.kt)("h3",{id:"zodioscreateinfinitequery"},(0,o.kt)("inlineCode",{parentName:"h3"},"zodios.createInfiniteQuery")),(0,o.kt)("p",null,"Generic request method that allows to load pages indefinitly."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"useInfiniteQuery(path: string, config?: ZodiosRequestOptions, infiniteQueryOptions?: CreateInfiniteQueryOptions): CreateInfiniteQueryResult<Response>;\n")),(0,o.kt)("p",null,"Compared to native solid-query infinite query, you also need to provide a function named ",(0,o.kt)("inlineCode",{parentName:"p"},"getPageParamList")," to tell zodios which parameters will be used to paginate. Indeed, zodios needs to know it to be able to generate the correct query key automatically for you."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'  const state = apiHooks.createInfiniteQuery(\n    "/users",\n    {\n      // request 10 users per page\n      queries: { limit: 10 },\n    },\n    {\n      // tell zodios to not use page as query key to allow infinite loading\n      getPageParamList: () => ["page"],\n      // get next page param has to return the next page as a query or path param\n      getNextPageParam: (lastPage, pages) => lastPage.nextPage ? {\n          queries: {\n            page: lastPage.nextPage,\n          },\n        }: undefined;\n    }\n  );\n')),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"check ",(0,o.kt)("a",{parentName:"p",href:"https://tanstack.com/query/v4/docs/adapters/solid-query"},"solid-query infinite query documentation")," for more informations on ",(0,o.kt)("inlineCode",{parentName:"p"},"InfiniteQueryResult")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"InfiniteQueryOptions"),".")),(0,o.kt)("h3",{id:"zodioscreateimmutableinfinitequery"},(0,o.kt)("inlineCode",{parentName:"h3"},"zodios.createImmutableInfiniteQuery")),(0,o.kt)("p",null,"Generic request method that allows to search pages indefinitly with post requests."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"useImmutableInfiniteQuery(path: string, body: Body ,config?: ZodiosRequestOptions, infiniteQueryOptions?: CreateInfiniteQueryOptions): CreateInfiniteQueryResult<Response>;\n")),(0,o.kt)("p",null,"Compared to native solid-query infinite query, you also need to provide a function named ",(0,o.kt)("inlineCode",{parentName:"p"},"getPageParamList")," to tell zodios which parameters will be used to paginate. Indeed, zodios needs to know it to be able to generate the correct query key automatically for you."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'  const state = apiHooks.createImmutableInfiniteQuery(\n    "/users/search",\n    {\n      // search for users named John\n      name: "John",\n      // request 10 users per page\n      limit: 10,\n    },\n    undefined,\n    {\n      // tell zodios to not use page as query key to allow infinite loading\n      getPageParamList: () => ["page"],\n      // get next page param has to return the next page as a query or path param\n      getNextPageParam: (lastPage, pages) => lastPage.nextPage ? {\n          body: {\n            page: lastPage.nextPage,\n          },\n        }: undefined;\n    }\n  );\n')),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"check ",(0,o.kt)("a",{parentName:"p",href:"https://tanstack.com/query/v4/docs/adapters/solid-query"},"create-query infinite query documentation")," for more informations on ",(0,o.kt)("inlineCode",{parentName:"p"},"InfiniteQueryResult")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"InfiniteQueryOptions"),".")),(0,o.kt)("h3",{id:"zodioscreatemutation"},(0,o.kt)("inlineCode",{parentName:"h3"},"zodios.createMutation")),(0,o.kt)("p",null,"Generic request method that allows to do mutations."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"createMutation(method: string, path: string, config: ZodiosRequestOptions, queryOptions?: CreateQueryOptions): CreateMutationResult<Response>;\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const state = hooks.createMutation('post','/users');\n")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"check ",(0,o.kt)("a",{parentName:"p",href:"https://tanstack.com/query/v4/docs/adapters/solid-query"},"solid-query documentation")," for more informations on ",(0,o.kt)("inlineCode",{parentName:"p"},"MutationResult")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"MutationOptions"),".")),(0,o.kt)("h3",{id:"zodioscreateget"},(0,o.kt)("inlineCode",{parentName:"h3"},"zodios.createGet")),(0,o.kt)("p",null,"Query hooks will return a ",(0,o.kt)("inlineCode",{parentName:"p"},"QueryResult")," object from ",(0,o.kt)("inlineCode",{parentName:"p"},"solid-query")," with:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"the response data and all solid-query result properties"),(0,o.kt)("li",{parentName:"ul"},"the generated ",(0,o.kt)("inlineCode",{parentName:"li"},"key")),(0,o.kt)("li",{parentName:"ul"},"the ",(0,o.kt)("inlineCode",{parentName:"li"},"invalidate")," helper.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"createGet(path: string, config?: ZodiosRequestOptions, queryOptions?: CreateQueryOptions): CreateQueryResult<Response>;\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const state = hooks.createGet("/users/:id", { params: { id: 1 } });\n// reactive example\nconst [id, setId] = createSignal(1);\nconst state = hooks.createGet("/users/:id", { params: { get id() { return id()} } });\n')),(0,o.kt)("h3",{id:"zodioscreatepost"},(0,o.kt)("inlineCode",{parentName:"h3"},"zodios.createPost")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"createPost(path: string, config?: ZodiosRequestOptions, queryOptions?: CreateMutationOptions): CreateMutationResult<Response>;\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const state = hooks.createPost("/users");\n')),(0,o.kt)("h3",{id:"zodioscreateput"},(0,o.kt)("inlineCode",{parentName:"h3"},"zodios.createPut")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"createPut(path: string, config?: ZodiosRequestOptions, queryOptions?: CreateMutationOptions): CreateMutationResult<Response>;\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const state = hooks.createPut("/users/:id", { params: { id: 1 } });\n// reactive example\nconst [id, setId] = createSignal(1);\nconst state = hooks.createPut("/users/:id", { params: { get id() { return id()} } });\n')),(0,o.kt)("h3",{id:"zodioscreatepatch"},(0,o.kt)("inlineCode",{parentName:"h3"},"zodios.createPatch")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"createPatch(path: string, config?: ZodiosRequestOptions, queryOptions?: CreateMutationOptions): CreateMutationResult<Response>;\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const state = hooks.createPatch("/users/:id", {params: {id: 1}});\n// reactive example\nconst [id, setId] = createSignal(1);\nconst state = hooks.createPatch("/users/:id", { params: { get id() { return id()} } });\n')),(0,o.kt)("h3",{id:"zodioscreatedelete"},(0,o.kt)("inlineCode",{parentName:"h3"},"zodios.createDelete")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"createDelete(path: string, config?: ZodiosRequestOptions, queryOptions?: CreateMutationOptions): CreateReactMutationResult<Response>;\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const state = hooks.createDelete("/users/:id", { params: {id: 1 }});\n// reactive example\nconst [id, setId] = createSignal(1);\nconst state = hooks.createDelete("/users/:id", { params: { get id() { return id()} } });\n')),(0,o.kt)("h2",{id:"zodios-key-helpers"},"Zodios key helpers"),(0,o.kt)("p",null,"Zodios provides some helpers to generate query keys to be used to invalidate cache or to get it directly from cache with 'QueryClient.getQueryData(key)'."),(0,o.kt)("h3",{id:"zodiosgetkeybypath"},(0,o.kt)("inlineCode",{parentName:"h3"},"zodios.getKeyByPath")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"getKeyByPath(method: string, path: string, config?: ZodiosRequestOptions): QueryKey;\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples"),":"),(0,o.kt)("p",null,"To get a key for a path endpoint with parameters:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const key = zodios.getKeyByPath('get', '/users/:id', { params: { id: 1 } });\nconst user = queryClient.getQueryData<User>(key);\n")),(0,o.kt)("p",null,"To get a key to invalidate a path endpoint for all possible parameters:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const key = zodios.getKeyByPath('get', '/users/:id');\nqueryClient.invalidateQueries(key);\n")),(0,o.kt)("h3",{id:"zodiosgetkeybyalias"},(0,o.kt)("inlineCode",{parentName:"h3"},"zodios.getKeyByAlias")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"getKeyByAlias(alias: string, config?: ZodiosRequestOptions): QueryKey;\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples"),":"),(0,o.kt)("p",null,"To get a key for an alias endpoint with parameters:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const key = zodios.getKeyByAlias('getUser', { params: { id: 1 } });\nconst user = queryClient.getQueryData<User>(key);\n")),(0,o.kt)("p",null,"To get a key to invalidate an alias endpoint for all possible parameters:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const key = zodios.getKeyByAlias('getUser');\nqueryClient.invalidateQueries(key);\n")),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="users.tsx"',title:'"users.tsx"'},'import { createSignal, For, Match, Show, Switch } from "solid-js";\nimport { QueryClient, QueryClientProvider } from "@tanstack/solid-query";\nimport { makeApi, Zodios } from "@zodios/core";\nimport { ZodiosHooks } from "../src";\nimport { z } from "zod";\n\n// you can define schema before declaring the API to get back the type\nconst userSchema = z\n  .object({\n    id: z.number(),\n    name: z.string(),\n  })\n  .required();\n\nconst createUserSchema = z\n  .object({\n    name: z.string(),\n  })\n  .required();\n\nconst usersSchema = z.array(userSchema);\n\n// you can then get back the types\ntype User = z.infer<typeof userSchema>;\ntype Users = z.infer<typeof usersSchema>;\n\nconst api = makeApi([\n  {\n    method: "get",\n    path: "/users",\n    alias: "getUsers",\n    description: "Get all users",\n    parameters: [\n      {\n        name: "page",\n        type: "Query",\n        schema: z.number().positive().optional(),\n      },\n      {\n        name: "limit",\n        type: "Query",\n        schema: z.number().positive().optional(),\n      },\n    ],\n    response: usersSchema,\n  },\n  {\n    method: "get",\n    path: "/users/:id",\n    description: "Get a user",\n    response: userSchema,\n  },\n  {\n    method: "post",\n    path: "/users",\n    alias: "createUser",\n    description: "Create a user",\n    parameters: [\n      {\n        name: "body",\n        type: "Body",\n        schema: createUserSchema,\n      },\n    ],\n    response: userSchema,\n  },\n]);\nconst baseUrl = "https://jsonplaceholder.typicode.com";\n\nconst zodios = new Zodios(baseUrl, api);\nconst zodiosHooks = new ZodiosHooks("jsonplaceholder", zodios);\n\nconst Users = () => {\n  const [page, setPage] = createSignal(0);\n  const users = zodiosHooks.createInfiniteQuery(\n    "/users",\n    { queries: { limit: 10 } },\n    {\n      getPageParamList: () => {\n        return ["page"];\n      },\n      getNextPageParam: () => {\n        return {\n          queries: {\n            get page() {\n              return page() + 1;\n            },\n          },\n        };\n      },\n    }\n  );\n  const user = zodiosHooks.createCreateUser(undefined, {\n    onSuccess: () => users.invalidate(),\n  });\n\n  return (\n    <>\n      <button onClick={() => user.mutate({ name: "john" })}>create user</button>\n      <Show when={users.hasNextPage}>\n        <button onClick={() => users.fetchNextPage()}>next</button>\n      </Show>\n      <Switch>\n        <Match when={users.isLoading}>Loading...</Match>\n        <Match when={users.isFetchingNextPage}>Fetching...</Match>\n        <Match when={!users.isFetching}>\n          <ul>\n            <For each={users.data?.pages}>\n              {(user) => (\n                <For each={user}>{(user) => <li>{user.name}</li>}</For>\n              )}\n            </For>\n          </ul>\n        </Match>\n      </Switch>\n    </>\n  );\n};\n\n// on another file\nconst queryClient = new QueryClient();\n\nexport const App = () => {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <Users />\n    </QueryClientProvider>\n  );\n};\n')))}d.isMDXComponent=!0}}]);