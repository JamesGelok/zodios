"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[557],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>m});var o=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,o,i=function(e,n){if(null==e)return{};var t,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=o.createContext({}),u=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},l=function(e){var n=u(e.components);return o.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),d=u(t),m=i,h=d["".concat(s,".").concat(m)]||d[m]||c[m]||a;return t?o.createElement(h,r(r({ref:n},l),{},{components:t})):o.createElement(h,r({ref:n},l))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,r=new Array(a);r[0]=d;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p.mdxType="string"==typeof e?e:i,r[1]=p;for(var u=2;u<a;u++)r[u]=t[u];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9067:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>c,frontMatter:()=>a,metadata:()=>p,toc:()=>u});var o=t(7462),i=(t(7294),t(3905));const a={sidebar_position:3},r="OpenAPI",p={unversionedId:"api/openapi",id:"api/openapi",title:"OpenAPI",description:"Zodios API definition to OpenAPI",source:"@site/docs/api/openapi.md",sourceDirName:"api",slug:"/api/openapi",permalink:"/docs/api/openapi",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"API definition helpers",permalink:"/docs/api/helpers"},next:{title:"Examples",permalink:"/docs/api/examples"}},s={},u=[{value:"Zodios API definition to OpenAPI",id:"zodios-api-definition-to-openapi",level:2},{value:"Info option",id:"info-option",level:3},{value:"Servers option",id:"servers-option",level:3},{value:"Security scheme option",id:"security-scheme-option",level:3},{value:"Basic auth",id:"basic-auth",level:4},{value:"Bearer auth",id:"bearer-auth",level:4},{value:"OAuth2",id:"oauth2",level:4},{value:"custom tags",id:"custom-tags",level:3},{value:"Examples",id:"examples",level:3},{value:"swagger-ui-express",id:"swagger-ui-express",level:4},{value:"OpenAPI to Zodios API definition",id:"openapi-to-zodios-api-definition",level:2}],l={toc:u};function c(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,o.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"openapi"},"OpenAPI"),(0,i.kt)("h2",{id:"zodios-api-definition-to-openapi"},"Zodios API definition to OpenAPI"),(0,i.kt)("p",null,"Zodios api definition format while simple can contain sufficient information to generate an OpenAPI documentation."),(0,i.kt)("p",null,"To generate an OpenAPI documentation from your api definition, you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"toOpenApi")," method of ",(0,i.kt)("inlineCode",{parentName:"p"},"@zodios/openapi")," package."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"function toOpenApi(\n  api: ZodiosApiDefinition,\n  options?: {\n    info?: OpenAPIV3.InfoObject\n    servers?: OpenAPIV3.ServerObject[];\n    securityScheme?: OpenAPIV3.SecuritySchemeObject;\n    tagsFromPathFn?: (path: string) => string[];\n  }\n): OpenAPIV3.Document;\n")),(0,i.kt)("h3",{id:"info-option"},"Info option"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"info")," option allows you to specify the OpenAPI info object."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'const doc = toOpenApi(api, {\n  info: {\n    title: "My API",\n    version: "1.0.0",\n  },\n});\n')),(0,i.kt)("h3",{id:"servers-option"},"Servers option"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"servers")," option allows you to specify the OpenAPI servers object. This is useful if you want to specify the base url of your api."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'const doc = toOpenApi(api, {\n  servers: [\n    {\n      url: "https://api.example.com",\n    },\n  ],\n});\n')),(0,i.kt)("h3",{id:"security-scheme-option"},"Security scheme option"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"securityScheme")," option allows you to specify the OpenAPI security scheme object. Zodios has 3 helper functions to generate the security scheme object."),(0,i.kt)("h4",{id:"basic-auth"},"Basic auth"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { basicAuthScheme } from "@zodios/openapi";\n\nconst doc = toOpenApi(api, {\n  securityScheme: basicAuthScheme(),\n});\n')),(0,i.kt)("h4",{id:"bearer-auth"},"Bearer auth"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { bearerAuthScheme } from "@zodios/openapi";\n\nconst doc = toOpenApi(api, {\n  securityScheme: bearerAuthScheme(),\n});\n')),(0,i.kt)("h4",{id:"oauth2"},"OAuth2"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'\nimport { oauth2Scheme } from "@zodios/openapi";\n\nconst doc = toOpenApi(api, {\n  securityScheme: oauth2Scheme({\n    implicit: {\n      authorizationUrl: "https://example.com/oauth2/authorize",\n      scopes: {\n        "read:users": "read users",\n        "write:users": "write users",\n      },\n    },\n  }),\n});\n')),(0,i.kt)("h3",{id:"custom-tags"},"custom tags"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"tagsFromPathFn")," option allows you to specify a function that returns an array of tags for a given path. This is useful if you want to group your endpoints by tags."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Zodios will by default deduce tags from the last named resource in the path. So for example, the path ",(0,i.kt)("inlineCode",{parentName:"p"},"/users/:id")," will have the tag ",(0,i.kt)("inlineCode",{parentName:"p"},"users"),", and the path ",(0,i.kt)("inlineCode",{parentName:"p"},"/users/:id/comments")," will have the tag ",(0,i.kt)("inlineCode",{parentName:"p"},"comments"),".\nOnly pass this option if you want to override this behavior.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const doc = toOpenApi(api, {\n  // hardcoded tags with dictionary\n  tagsFromPathFn: (path) => {\n    '/users': ['users'],\n    '/users/:id': ['users'],\n    '/users/:id/comments': ['users'],\n  }[path],\n});\n")),(0,i.kt)("h3",{id:"examples"},"Examples"),(0,i.kt)("h4",{id:"swagger-ui-express"},"swagger-ui-express"),(0,i.kt)("p",null,"You can expose your OpenAPI documentation with the ",(0,i.kt)("inlineCode",{parentName:"p"},"@zodios/express")," package."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { serve, setup } from "swagger-ui-express";\nimport { makeApi } from "@zodios/core";\nimport { zodiosApp, zodiosRouter } from "@zodios/express";\nimport { toOpenApi } from "@zodios/openapi";\nimport { userApi } from "./api";\nimport { userRouter } from \'./userRouter\';\n\nconst app = zodiosApp();\n\n// expose user api endpoints\napp.use(\'/api/v1\', userRouter);\n\n// expose openapi documentation\nconst document = toOpenApi(userApi, {\n  info: {\n    title: "User API",\n    version: "1.0.0",\n    description: "A simple user API",\n  },\n  servers: [\n    {\n      url: "/api/v1", // base path of user api\n    },\n  ],\n});\n\napp.use(`/docs/swagger.json`, (_, res) => res.json(document));\napp.use("/docs", serve);\napp.use("/docs", setup(undefined, { swaggerUrl: "/docs/swagger.json" }));\n\napp.listen(3000);\n')),(0,i.kt)("h2",{id:"openapi-to-zodios-api-definition"},"OpenAPI to Zodios API definition"),(0,i.kt)("p",null,"If you want to use an existing OpenAPI documentation to generate your Zodios API definition, you can use the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/astahmer/openapi-zod-client"},"openapi-zod-client")," package."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'npx openapi-zod-client "swagger.json" -o "zodios-client.ts"\n')))}c.isMDXComponent=!0}}]);